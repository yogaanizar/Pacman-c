#include "header.h"


int maps_level(int l, int a, int b){
if(l==1){
        int X[BRS][KLM] = {
		{3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 0, 0, 0, 0, 0},
		{5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11, 5, 0, 0, 0, 0, 0},
		{5,11, 3, 6, 6, 6, 8 ,6, 6, 4,11, 3, 6, 6, 6, 4,11, 3, 6, 6, 8, 6, 6, 6, 4,11, 5, 0, 0, 0, 0, 0},
		{5,11, 5,12,11,11, 5,11,11,11,11,11,11,11,11,11,11,11,11,11, 5,11,11,12, 5,11, 5, 0, 0, 0, 0, 0},
		{5,11, 5,11, 5,11, 5,11, 3, 4,11, 3, 6, 6, 6, 4,11, 3, 4,11, 5,11, 5,11, 5,11, 5, 0, 0, 0, 0, 0},
		{5,11, 5,11, 5,11, 5,11, 1, 2,11, 1, 6, 6, 6, 2,11, 1, 2,11, 5,11, 5,11, 5,11, 5, 0, 0, 0, 0, 0},
		{5,11, 5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11, 5,11, 5, 0, 0, 0, 0, 0},
		{5,11, 1, 6, 6, 6,11,11,11,11,11, 3, 0, 0, 0, 4,11,11,11,11,11, 6, 6, 6, 2,11, 5, 0, 0, 0, 0, 0},
		{5,11,11,11,11,11,11,11, 6, 6,11, 0, 0,14, 0, 0,11, 6, 6,11,11,11,11,11,11,11, 5, 0, 0, 0, 0, 0},
		{5,11, 3, 6, 6, 6,11,11,11,11,11, 1, 0, 0, 0, 2,11,11,11,11,11, 6, 6, 6, 4,11, 5, 0, 0, 0, 0, 0},
		{5,11, 5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11, 5,11, 5, 0, 0, 0, 0, 0},
		{5,11, 5,11, 5,11, 5,11, 3, 4,11, 3, 6, 6, 6, 4,11, 3, 4,11, 5,11, 5,11, 5,11, 5, 0, 0, 0, 0, 0},
		{5,11, 5,11, 5,11, 5,11, 1, 2,11, 1, 6, 6, 6, 2,11, 1, 2,11, 5,11, 5,11, 5,11, 5, 0, 0, 0, 0, 0},
		{5,11, 5,12,11,11, 5,11,11,11,11,11,11,11,11,11,11,11,11,11, 5,11,11,12, 5,11, 5, 0, 0, 0, 0, 0},
		{5,11, 1, 6, 6, 6, 7, 6, 6, 2,11, 1, 6, 6, 6, 2,11, 1, 6, 6, 7, 6, 6, 6, 2,11, 5, 0, 0, 0, 0, 0},
		{5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11, 5, 0, 0, 0, 0, 0},
		{1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},};
		return X[a][b]; }
if(l==2){
        int Y[BRS][KLM] =   {
		{3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 0, 0, 0, 0, 0},
		{5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11, 5, 0, 0, 0, 0, 0},
		{5,11,12,11, 5,11, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,11, 5,11,12,11, 5, 0, 0, 0, 0, 0},
		{5,11,11,11, 5,11,11,11,11, 6, 8, 6,11,11,11, 6, 8, 6,11,11,11,11, 5,11,11,11, 5, 0, 0, 0, 0, 0},
		{5,11, 6, 6, 2,11, 3, 4,11,11, 5,11,11,12,11,11, 5,11,11, 3 ,4,11, 1, 6, 6,11, 5, 0, 0, 0, 0, 0},
		{5,11,11,11,11,11, 1, 2,11,11, 5,11, 6, 6, 6,11, 5,11,11, 1, 2,11,11,11,11,11, 5, 0, 0, 0, 0, 0},
		{5,11, 5,11, 6, 6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11, 6, 6,11, 5,11, 5, 0, 0, 0, 0, 0},
		{5,11, 5,11,11,11,11, 6, 6,11,11, 3, 0, 0, 0, 4,11,11, 6, 6,11,11,11,11, 5,11, 5, 0, 0, 0, 0, 0},
		{5,11, 9, 6, 6, 6,11,11,11,11, 0, 0, 0,14, 0, 0, 0,11,11,11,11, 6, 6, 6,10,11, 5, 0, 0, 0, 0, 0},
		{5,11, 5,11,11,11,11, 6, 6,11,11, 1, 0, 0, 0, 2,11,11, 6, 6,11,11,11,11, 5,11, 5, 0, 0, 0, 0, 0},
		{5,11, 5,11, 6, 6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11, 6, 6,11, 5,11, 5, 0, 0, 0, 0, 0},
		{5,11,11,11,11,11, 3, 4,11,11, 5,11, 6, 6, 6,11, 5,11,11, 3, 4,11,11,11,11,11, 5, 0, 0, 0, 0, 0},
		{5,11, 6, 6, 4,11, 1, 2,11,11, 5,11,11,12,11,11, 5,11,11, 1, 2,11, 3, 6, 6,11, 5, 0, 0, 0, 0, 0},
		{5,11,11,11, 5,11,11,11,11, 6, 7, 6,11,11,11, 6, 7, 6,11,11,11,11, 5,11,11,11, 5, 0, 0, 0, 0, 0},
		{5,11,12,11, 5,11, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,11, 5,11,12,11, 5, 0, 0, 0, 0, 0},
		{5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11, 5, 0, 0, 0, 0, 0},
		{1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		};
		return Y[a][b]; }
    if(l==3){
        int Z[BRS][KLM] =   {
		{3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 0, 0, 0, 0, 0},
		{5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11, 5, 0, 0, 0, 0, 0},
		{5,11, 3, 4,11, 3, 6, 6, 6,11, 3, 6, 6, 6, 6, 6, 4,11, 6, 6, 6, 4,11, 3, 4,11, 5, 0, 0, 0, 0, 0},
		{5,11, 1, 2,11, 5,11,11,11,11, 1, 6, 6, 6, 6, 6, 2,11,11,11,11, 5,11, 1, 2,11, 5, 0, 0, 0, 0, 0},
		{5,11,11,11,11, 5,11, 5,11,11,11,11,11,11,11,11,11,11,11, 5,11, 5,11,11,11,11, 5, 0, 0, 0, 0, 0},
		{5,11, 5,12,11,11,11, 5,11, 3, 6, 6,11,11,11, 6, 6, 4,11, 5,11,11,11,12, 5,11, 5, 0, 0, 0, 0, 0},
		{5,11, 1, 6, 6, 6,11, 5,11, 5,11,11,11,11,11,11,11, 5,11, 5,11, 6, 6, 6, 2,11, 5, 0, 0, 0, 0, 0},
		{5,11,11,11,11,11,11, 5,11,11,11, 3, 0, 0, 0, 4,11,11,11, 5,11,11,11,11,11,11, 5, 0, 0, 0, 0, 0},
		{5,11, 6, 6, 6, 6, 6, 7, 6, 6,11, 0, 0,14, 0, 0,11, 6, 6, 7, 6, 6, 6, 6, 6,11, 5, 0, 0, 0, 0, 0},
		{5,11,11,11,11,11,11,11,11,11,11, 1, 0, 0, 0, 2,11,11,11,11,11,11,11,11,11,11, 5, 0, 0, 0, 0, 0},
		{5,11, 3, 4,11, 6, 6, 6, 6, 4,11,11,11,11,11,11,11, 3, 6, 6, 6, 6,11, 3, 4,11, 5, 0, 0, 0, 0, 0},
		{5,11, 5, 5,11,11,11,11,11, 5,11,11,11,11,11,11,11, 5,11,11,11,11,11, 5, 5,11, 5, 0, 0, 0, 0, 0},
		{5,11, 5, 5,11, 5,11,12,11, 5, 5,11,11,11,11,11, 5, 5,11,12,11, 5,11, 5, 5,11, 5, 0, 0, 0, 0, 0},
		{5,11, 5, 5,11, 5,11,11,11, 5, 9, 6, 6,11, 6, 6,10, 5,11,11,11, 5,11, 5, 5,11, 5, 0, 0, 0, 0, 0},
		{5,11, 1, 2,11, 1, 6, 6,11, 5, 5,11,11,11,11,11, 5, 5,11, 6, 6, 2,11, 1, 2,11, 5, 0, 0, 0, 0, 0},
		{5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11, 5, 0, 0, 0, 0, 0},
		{1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		};
		return Z[a][b]; }
}

void maps(int mat, int baris, int kolom){
	if(mat==0){
		black(baris, kolom);
	}
	if(mat==1){
		siku_kiri_bawah(baris, kolom);
	}
	if(mat==2){
		siku_kanan_bawah(baris, kolom);
	}
	if(mat==3){
		siku_kiri_atas(baris, kolom);
	}
	if(mat==4){
        siku_kanan_atas(baris, kolom);
	}
	if(mat==5){
        vertikal(baris, kolom);
	}
	if(mat==6){
        horizontal(baris, kolom);
	}
	if(mat==7){
        T_atas(baris, kolom);
	}
	if(mat==8){
        T_bawah(baris, kolom);
	}
	if(mat==9){
        T_kanan(baris, kolom);
	}
	if(mat==10){
        T_kiri(baris, kolom);
	}
	if(mat==11){
        smallpellet(baris, kolom);
	}
	if(mat==12){
         largepellet(baris, kolom);
	}
	if(mat==14){
         ghostMerah(baris, kolom);
	}
	if (mat==15){
        ghostBiru(baris, kolom);
	}
}


void outgame(int i, int j){
readimagefile("maze//putih.jpg", img_mtrx);
delay(100);
readimagefile("maze//merah.jpg", img_mtrx);
delay(100);
readimagefile("maze//kuning.jpg", img_mtrx);
delay(100);
readimagefile("maze//hijau.jpg", img_mtrx);
delay(100);

}

void black(int i, int j)
{
	readimagefile("maze//0.jpg", img_mtrx);
}

void siku_kiri_bawah(int i, int j){
	readimagefile("maze//1.jpg", img_mtrx);
}

void siku_kanan_bawah (int i, int j){
	readimagefile("maze//2.jpg", img_mtrx);
}

void siku_kiri_atas (int i, int j){
	readimagefile("maze//3.jpg", img_mtrx);
}

void siku_kanan_atas (int i, int j){
	readimagefile("maze//4.jpg", img_mtrx);
}

void vertikal(int i, int j){
	readimagefile("maze//5.jpg", img_mtrx);
}

void horizontal(int i, int j){
	readimagefile("maze//6.jpg", img_mtrx);
}

void T_atas(int i, int j){
	readimagefile("maze//7.jpg", img_mtrx);
}

void T_bawah(int i, int j){
	readimagefile("maze//8.jpg", img_mtrx);
}

void T_kanan(int i, int j){
	readimagefile("maze//9.jpg", img_mtrx);
}

void T_kiri(int i, int j){
	readimagefile("maze//10.jpg", img_mtrx);
}


void smallpellet (int i, int j){
	readimagefile("maze//11.jpg", img_mtrx);
}

void largepellet (int i, int j){
	readimagefile("maze//12.jpg", img_mtrx);
}



void samping(int i, int j, int p){
	if(p==1){
		readimagefile("img//pacman-kanan.jpg", img_mtrx);
		delay(100);
		readimagefile("img//pacman-balem-kanan.jpg", img_mtrx);
		delay(100);
	}else if(p==2){
		readimagefile("img//pacman-kiri.jpg", img_mtrx);
		delay(100);
		readimagefile("img//pacman-balem-kiri.jpg", img_mtrx);
		delay(100);
	}
}

void atas(int i, int j, int p){
	if(p==3){
		readimagefile("img//pacman-atas.jpg", img_mtrx);
		delay(100);
		readimagefile("img//pacman-balem-atas.jpg", img_mtrx);
		delay(100);
	}
}

void bawah(int i, int j, int p){
    if(p==4){
        readimagefile("img//pacman-bawah.jpg", img_mtrx);
        delay(100);
		readimagefile("img//pacman-balem-bawah.jpg", img_mtrx);
		delay(100);
    }
}

void pellet(int mat, int baris, int kolom){
	if(mat==11){
		smallpellet(baris, kolom);
	}
	if(mat==12){
		largepellet(baris, kolom);
	}
}


void how(int p){
	if(p==1){
		readimagefile("img//img//info//aturan main 2.jpg",fullscreen);
	}else if(p==2){
		readimagefile("img//img//info//aturan kontrol.jpg",fullscreen);
	}
	else if(p==3){
        readimagefile("img//img//info//info.jpg",fullscreen);
	}
}

void keluar(){
	readimagefile("assets//img//pacman//exitt.jpg",420,240,420+420,240+240);
	readimagefile("assets//img//pacman//no.jpg",470,390,520,440);
	readimagefile("assets//img//pacman//yes.jpg",740,390,790,440);
}
